class Car():

    def __init__(self, make, model, year):

        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0


    def get_descriptive_name(self):
        long_name = f"{self.make} {self.model} {self.year}"
        return long_name

    def read_odometer(self):
        print(f"This car has {self.odometer_reading} miles on it.")

    def update_odometer(self,mileage):
        if mileage >= self.odometer_reading:
            self.odometer_reading = mileage
        else:
            print("You can't roll back an odometer!")

    def increment_odometer(self,miles):
        self.odometer_reading += miles

class Baterry():
    def __init__(self, battery_size=70):
        self.battery_size = battery_size


    def describe_battery(self):
        print(f"This car has {self.battery_size} kWh battery left")

    def get_range(self):
        range = self.battery_size * 3.5

        message = f"This car con go approximately {range}"
        message += " miles on a full charge."
        print(message)

class EletricCar(Car):

    def __init__(self,make,model,year):
        super().__init__(make,model,year)
        self.battery = Baterry()


    def fill_gas_tank(self):
        print("This car doesn't need a gas tank!")



my_tesla = EletricCar("Tesla","Model S",2016)
print(my_tesla.get_descriptive_name())
my_tesla.battery.describe_battery()
my_tesla.battery.get_range()

